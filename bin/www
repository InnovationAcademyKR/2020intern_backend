#!/usr/bin/env node

//Module dependencies.
const app = require('../app');
const debug = require('debug')('2020intern-backend:server');
const http = require('http');

<<<<<<< HEAD
let app = require('../app');
let debug = require('debug')('2020intern-backend:server');
let http = require('http');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);
=======
//Normalize a port into a number, string, or false.
const normalizePort = (val) => {
  const port = parseInt(val, 10);
>>>>>>> model

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

<<<<<<< HEAD

/**
 * Event listener for HTTP server "error" event.
 */
=======
//Event listener for HTTP server "listening" event.
const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
>>>>>>> model

//Event listener for HTTP server "error" event.
const onError = (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

<<<<<<< HEAD
  let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
=======
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
>>>>>>> model

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


<<<<<<< HEAD
function onListening(){
  let addr = server.address();
  let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);





=======
 //Get port from environment and store in Express.
const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

//Create HTTP server. 
const server = http.createServer(app);

//Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
>>>>>>> model
